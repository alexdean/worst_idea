#!/usr/bin/env ruby
require_relative '../lib/game_state'
require_relative '../lib/log'
require "google/cloud/firestore"
require "logger"
require "pathname"
require "random-word"
require "securerandom"
require "thor"

$rails_root = Pathname.new(File.expand_path('../..', __FILE__))
Google::Cloud::Firestore.configure do |config|
  config.credentials = $rails_root.join('firebase-admin-sdk-tkray-bad-ideas-106028a5b26f.json').to_s
end

class WorstIdeaAdmin < Thor
  include Thor::Actions

  no_commands do
    def log
      @log ||= Log.new($stdout, level: Logger::DEBUG)
    end

    def db
      @db ||= Google::Cloud::Firestore.new
    end

    def fetch_game(game_name)
      db.doc("games/#{game_name}")
    end

    def calculate_active_player_count(game)
      game.col('players').where('is_active', '==', true).get.count
    end

    def create_question(game, question_id, question_data)
      game.collection('questions').doc(question_id).set({ summary: {} }.merge(question_data))
      log.debug "created question id #{question_id}."
    end

    def confirm_yes
      yes?("enter 'yes' to confirm >")
    end

    def crown_randomly(game)
      players = game.collection('players').where('is_active', '==', true).get.to_a
      max_idx = players.size
      emperor_idx = rand(max_idx)

      next_emperor = players[emperor_idx]
      log.info "selected #{next_emperor.data[:name]} as Emperor."
      next_emperor
    end

    def crown_by_shortcode(game)
      code = ask("Enter the short code for the next Emperor:")

      candidates = game.collection('players').where('short_code', '==', code).get.to_a

      if candidates.size == 0
        log.error "no player has short code #{code}."
        exit 1
      elsif candidates.size > 1
        log.error "code #{code} is not unique. #{candidates.inspect}"
        exit 1
      end

      candidates[0]
    end

    def finalize_players(game)
      game_data = game.get
      if game_data[:current_stage] == GameState::JOINING
        log.error "cannot finalize players while in 'joining' stage. users have write access to their data now."
        exit 1
      end

      log.info "Setting player state. Generating short codes and making all players active."
      players = game.collection('players').get
      db.transaction do |tx|
        players.each do |player_snapshot|
          tx.set(player_snapshot.reference, {is_active: true, short_code: unique_short_code, name: player_snapshot[:name]})
        end
      end

      log.info "Creating player_answers for each player."
      # players = game.collection('players').get
      db.transaction do |tx|
        players.each do |player_snapshot|
          tx.set(game.col('player_answers').doc(player_snapshot.document_id), {answer_id: nil})
        end
      end
    end

    def unique_short_code
      @used ||= Set.new

      candidate = nil
      loop do
        candidate = (0...4).map { (65 + rand(26)).chr }.join
        if !@used.include?(candidate)
          @used << candidate
          break
        end
      end

      candidate
    end
  end

  desc "init", "Create a new game from the given template."
  method_option :production, type: :boolean, default: false
  method_option :template, type: :string, default: 'current', aliases: '-t'
  method_option :name, type: :string, aliases: '-n', desc: "nice name for the game"
  method_option :game, type: :string, aliases: '-g'
  def init
    log.debug 'started'

    if options[:production] && options[:game]
      log.error "cannot specify both --production and --game"
      exit 1
    end

    now = Time.now
    game_name = options[:game]

    if !game_name
      if options[:production]
        game_name = 'current'
      else
        game_name = "#{now.strftime('%Y%m%d')}-#{options[:template]}-#{RandomWord.nouns(not_shorter_than: 4, not_longer_than: 20).next.gsub('_', '-')}"
      end
    end

    log.debug "game_name: '#{game_name}'"

    template_path = $rails_root.join("config/game_templates/#{options[:template]}.yml")
    if !File.exist?(template_path)
      log.error("#{template_path} does not exist.")
      exit 1
    end
    template_data = YAML.load_file(template_path)

    log.debug 'loaded template data'

    game = fetch_game(game_name)

    next_state = GameState.new(
      title: options[:name] || game_name,
      current_stage: GameState::JOINING,
      leader_player_id: nil,
      active_question_id: nil,
      active_question_max_answer_id: nil,
      active_player_count: 0,
      created_at: now
    ).to_h

    log.debug "setting game state."
    log.debug next_state
    game.set(next_state)
    log.debug 'game state set.'

    questions = game.col('questions')
    log.info "deleting existing questions."
    db.transaction do |tx|
      questions.get.each do |question|
        tx.delete(question)
      end
    end

    # answers for the current question only. (erased after each question is fully summarized.)
    player_answers = game.col('player_answers')
    log.info "deleting existing player_answers."
    db.transaction do |tx|
      player_answers.get.each do |player_answer|
        tx.delete(player_answer)
      end
    end

    players = game.col('players')
    log.info "deleting existing players."
    db.transaction do |tx|
      players.get.each do |player|
        tx.delete(player)
      end
    end

    log.info 'creating questions.'
    template_data['questions'].each_with_index do |(question_text, answers), idx|
      question_data = {
        question: question_text,
        answers: answers
      }
      create_question(game, idx, question_data)
    end

    log.info "initialized game '#{game_name}'"
    `printf '#{game_name}' | pbcopy`
  end

  desc "summarizer", "summarize and persist player answers."
  method_option :game, type: :string, required: true, aliases: '-g'
  def summarize
    game = fetch_game(options[:game])

    game_data_mutex = Mutex.new
    game_data = nil
    game_listener = game.listen do |snapshot|
      log.batch do
        log.debug "got game snapshot."
        game_data_mutex.synchronize do
          game_data = snapshot.data
          if game_data.nil?
            log.error "game has no data."
          else
            log.info "new game data."
            log.info game_data.slice(:current_stage, :active_question_id, :leader_player_id)
          end
        end
      end
    end

    trap("INT") do
      @exit = 0
    end

    update_every = 1.5 # wait this many seconds between summary updates.
    last_summary_written_at = 0
    active_question_id = nil
    active_question_max_answer_id = nil
    current_stage = nil
    summaries_since_last_stage_change = 0
    do_summary = false
    last_summary = {}

    loop do
      break if @exit

      game_data_mutex.synchronize do
        if !game_data.nil?
          active_question_id = game_data[:active_question_id]
          active_question_max_answer_id = game_data[:active_question_max_answer_id]

          if current_stage != game_data[:current_stage]
            summaries_since_last_stage_change = 0
            current_stage = game_data[:current_stage]
          end

          # do_summary: while in question-open, plus once during question-closed
          next_do_summary = current_stage == GameState::QUESTION_OPEN || (current_stage == GameState::QUESTION_CLOSED && summaries_since_last_stage_change == 0)
          if next_do_summary != do_summary
            log.info "         current_stage: #{current_stage}"
            log.info "do_summary changing to: #{next_do_summary}"
          end

          do_summary = next_do_summary
        end
      end

      if !do_summary
        sleep 0.5
        next
      end

      total_votes = 0
      summary = {}
      # fully populate the hash, so we correctly set a value back to 0 if users had chosen it but no longer do.
      # active_question_max_answer_id is 0-indexed. 2 questions have max_id 1
      # hence +1.
      (active_question_max_answer_id + 1).times { |idx| summary[idx] = 0 }

      game.col('player_answers').get do |player_doc|
        player_id = player_doc.document_id
        answer_id = player_doc.data[:answer_id]
        log_context = "active_question_id:#{active_question_id}, player_id:#{player_id}, answer_id:#{answer_id}"

        if !answer_id.is_a?(Integer)
          log.error "#{log_context} not an integer. is #{answer_id.class}"
          next
        end

        # validate that the answer id exists for this question
        if answer_id < 0 || answer_id > active_question_max_answer_id
          log.error "#{log_context} answer out of range"
          next
        end

        # TODO: paranoia. hash should already have all keys so this should be unnecessary.
        # summary[answer_id] ||= 0
        summary[answer_id] += 1
        total_votes += 1
      end

      now = Process.clock_gettime(Process::CLOCK_MONOTONIC)
      since_last_write = now - last_summary_written_at
      if since_last_write < update_every
        sleep_for = (update_every - since_last_write).round(3)
        log.debug "sleeping #{sleep_for}s"
        sleep sleep_for
      end

      if summary != last_summary
        log.debug "writing new summary to database."
        db.transaction do |tx|
          tx.update(game.col("questions").doc(active_question_id), {summary: summary})
          tx.update(game, {summary: summary})
        end
        log.batch do
          log.debug "summary written. total_votes:#{total_votes}"
          log.info summary
        end

        last_summary = summary
      end

      summaries_since_last_stage_change += 1 # TODO: dont think this needs mutex, but maybe?
      last_summary_written_at = Process.clock_gettime(Process::CLOCK_MONOTONIC)
    end

    log.info 'exiting.'
  end

  desc "crown", "select the next Emperor of Bad Ideas"
  method_option :game, type: :string, required: true, aliases: '-g'
  method_option :via, type: :string, required: true, enum: ['random', 'code'], aliases: '-v'
  def crown
    game_name = options[:game]
    game = fetch_game(game_name)

    case options[:via]
    when 'random' then
      next_emperor = crown_randomly(game)
    when 'code' then
      next_emperor = crown_by_shortcode(game)
    else
      log.error "unknown --via option #{options[:via]}"
      exit 1
    end

    log.info "about to crown '#{next_emperor[:name]}' (#{next_emperor.document_id})."
    if !confirm_yes
      log.info "exiting."
      exit 0
    end

    # should only ever be 1, but we'll do it this way just for safety.
    # users have write access to their player document when they join the game, so they
    # might manage to do something silly.
    current_emperors = game.collection('players').where('is_leader', '==', true).get

    db.transaction do |tx|
      tx.update(game, leader_player_id: next_emperor.document_id)
      current_emperors.each do |current_emperor_snapshot|
        log.info "dethroning #{current_emperor_snapshot[:name]}"
        tx.update(current_emperor_snapshot.reference, {is_leader: false})
      end
      tx.update(next_emperor.reference, {is_leader: true, is_active: true})
    end

    log.info "A new Emperor has been crowned!"
  end

  # desc "finalize-players", "generate unique short codes for all players"
  # method_option :game, type: :string, required: true, aliases: '-g'
  # def finalize_players
  #   game_name = options[:game]
  #   game = fetch_game(game_name)
  #   finalize_players(game)
  # end

  desc "eliminate", "eliminate players"
  method_option :game, type: :string, required: true, aliases: '-g'
  method_option :who, type: :string, required: true, aliases: '-w', enum: ['agree', 'disagree'], desc: "eliminate those who :agree or :disagree?"
  def eliminate_players
    game_name = options[:game]
    game = fetch_game(game_name)
    game_data = game.get
    emperor_id = game_data[:leader_player_id]

    if emperor_id.nil?
      log.error "Game has no Emperor. Cannot calculate results."
      exit 1
    end

    if game_data[:current_stage] != GameState::QUESTION_CLOSED
      log.error "current_stage='#{game_data[:current_stage]}'. Can only eliminate players during '#{GameState::QUESTION_CLOSED}'."
      exit 1
    end

    emperor = game.collection('players').doc(emperor_id).get
    log.info "Emperor is '#{emperor[:name]}' (#{emperor_id})."

    # find the answer given by the emperor
    emperors_answer = game.collection('player_answers').doc(emperor_id).get
    if !emperors_answer.exists?
      log.error "Emperor did not choose an answer. Cannot calculate results."
      exit 1
    end
    if !emperors_answer[:answer_id]
      log.error "Emperor's answer does not have an answer_id. emperors_answer=#{emperors_answer.inspect}"
    end
    active_question = game.collection('questions').doc(game_data[:active_question_id]).get
    if !active_question.exists?
      log.error "cannot find the active question. game_data[:active_question_id]=#{game_data[:active_question_id]}."
      exit 1
    end
    log.info "Active question: #{active_question[:question]}"
    emperors_answer_details = active_question[:answers][emperors_answer[:answer_id]]
    log.info "Emperor selected '#{emperors_answer_details}'."
    log.info "We will eliminate those who #{options[:who]} with the Emperor."

    player_answers = {}
    game.collection('player_answers').get.each do |player_answer|
      player_answers[player_answer.document_id.strip] = player_answer[:answer_id]
    end

    log.debug "player_answers: #{player_answers.inspect}"
    to_eliminate = []
    still_active = 0

    game.collection('players').where('is_active', '==', true).get.each do |player_snapshot|
      player_id = player_snapshot.document_id.strip
      player_answer_id = player_answers[player_id]

      eliminate = false

      log.debug "player_answer_id=#{player_answer_id}" \
        " emperors_answer[:answer_id]=#{emperors_answer[:answer_id]}"

      if !player_answer_id
        log.debug "'#{player_snapshot[:name]}' (#{player_id}) will be eliminated for not providing an answer."
        eliminate = true
      elsif options[:who] == 'agree' && player_answer_id == emperors_answer[:answer_id] && player_id != emperor_id
        log.debug "'#{player_snapshot[:name]}' (#{player_id}) will be eliminated for agreeing with the Emperor."
        eliminate = true
      elsif options[:who] == 'disagree' && player_answer_id != emperors_answer[:answer_id]
        log.debug "'#{player_snapshot[:name]}' (#{player_id}) will be eliminated for disagreeing with the Emperor."
        eliminate = true
      end

      if eliminate
        to_eliminate << player_snapshot.reference
      else
        still_active += 1
      end
    end

    log.info "about to eliminate #{to_eliminate.size} players, which will leave #{still_active} players remaining (including the Emperor)."
    if !confirm_yes
      log.info 'Exiting.'
      exit 0
    end

    db.transaction do |tx|
      to_eliminate.each do |player_reference|
        tx.update(player_reference, {is_active: false})
      end
    end

    active_player_count = calculate_active_player_count(game)
    db.transaction do |tx|
      tx.update(game, {active_player_count: active_player_count})
    end

    log.info "eliminated #{to_eliminate.size} players."
    log.info "#{active_player_count} players remain (including the current Emperor)."
  end

  desc "next", "advance to the next game state"
  method_option :game, type: :string, required: true, aliases: '-g'
  def next_state
    game_name = options[:game]
    game = fetch_game(game_name)
    game_data = game.get

    # TODO: an actual state machine to sort out this mess.
    next_game_state = GameState.new
    next_question_id = nil
    clear_player_answers = false

    case game_data[:current_stage]
    when GameState::JOINING then
      next_game_state.set(:current_stage, GameState::PREPARING)
      log.info "Make sure to crown an Emperor before opening the first question."
    when GameState::PREPARING then
      next_question_id = 0
      if game_data[:leader_player_id].nil?
        log.error "No Emperor. Crown somebody before opening first question."
        exit 1
      end
    when GameState::QUESTION_OPEN then
      if game_data[:leader_player_id].nil?
        log.error "game has no Emperor. cannot calculate results without one."
        exit 1
      end
      next_game_state.set(:current_stage, GameState::QUESTION_CLOSED)
      log.info "Make sure to eliminate players before moving to results stage."
    when GameState::QUESTION_CLOSED then
      next_game_state.set(:current_stage, GameState::QUESTION_RESULTS)
    when GameState::QUESTION_RESULTS then
      current_question_id = game_data[:active_question_id]
      next_question_id = current_question_id + 1
    when GameState::FINISHED then
      log.info 'Game is already finished. Not advancing.'
      exit 0
    else
      log.error "Game is in unknown stage '#{game_data[:current_stage]}'."
      exit 1
    end

    if next_question_id
      next_question = game.col('questions').doc(next_question_id).get
      if next_question.exists?
        next_game_state.set(:active_question_id, next_question_id)
        next_game_state.set(:active_question_max_answer_id, next_question[:answers].size - 1)
        next_game_state.set(:current_stage, GameState::QUESTION_OPEN)
        clear_player_answers = true
      else
        next_game_state.set(:active_question_id, nil)
        next_game_state.set(:active_question_max_answer_id, nil)
        next_game_state.set(:current_stage, GameState::FINISHED)
      end
    end

    next_game_state_data = next_game_state.to_h
    log.info "next_game_state:"
    log.info next_game_state_data

    db.transaction do |tx|
      tx.set(
        game,
        next_game_state_data,
        merge: true
      )
      # TODO: expose this as a separate action in case something fails when changing game states.
      if clear_player_answers
        game.col('player_answers').get do |snapshot|
          tx.delete(snapshot.reference)
        end
      end
    end
    # change name since we've successfully committed a change.
    current_game_state_data = next_game_state_data

    # actions to take once state has changed.
    if current_game_state_data[:current_stage] == GameState::PREPARING
      finalize_players(game)

      active_player_count = calculate_active_player_count(game)
      log.info "#{active_player_count} active players."
      game.update({active_player_count: active_player_count})
    end
  end

  desc "current", "report current game state"
  method_option :game, type: :string, required: true, aliases: '-g'
  def current_state
    game = fetch_game(options[:game])
    game_data = game.get
    player_count = calculate_active_player_count(game)

    emperor_id = game_data[:leader_player_id]
    if emperor_id
      emperor_name = game.collection('players').doc(emperor_id).get[:name]
      emperor_description = "#{emperor_name} (#{emperor_id})"
    else
      emperor_description = emperor_id
    end

    log.info "                current_stage: #{game_data[:current_stage]}"
    log.info "           active_question_id: #{game_data[:active_question_id]}"
    log.info "active_question_max_answer_id: #{game_data[:active_question_max_answer_id]}"
    log.info "                      emperor: #{emperor_description}"
    log.info "               active_players: #{player_count}"
  end

  desc "add-question", "add a new question to the game"
  method_option :game, type: :string, required: true, aliases: '-g'
  method_option :question, type: :string, required: true, aliases: '-q'
  method_option :answers, type: :array, required: true, aliases: '-a'
  def add_question
    game = fetch_game(options[:game])

    proposed = {
      answers: options[:answers],
      question: options[:question]
    }

    if proposed[:answers].size < 2
      log.error "question must have at least 2 answers."
      exit 1
    end

    questions = game.collection('questions')
    max_question_id = questions.get.map { |question_snapshot| question_snapshot.document_id.to_i }.max
    new_question_id = max_question_id + 1

    new_question_number = new_question_id + 1

    log.info "confirm this is correct:"
    log.info "  question: '#{proposed[:question]}'"
    log.info "  answers:"
    options[:answers].each_with_index do |answer_text, idx|
      log.info "    #{idx + 1}: '#{answer_text}'"
    end
    log.info "this will be question #{new_question_number} (index #{new_question_id})."
    if !confirm_yes
      log.info 'cancelled.'
      exit 0
    end

    create_question(game, new_question_id, proposed)
    log.info "question created successfully."
  end

  desc "delete-doc-test", "test what happens when you listen to a document that gets deleted"
  method_option :game, type: :string, required: true, aliases: '-g'
  def delete_doc_test
    game = fetch_game(options[:game])
    player = game.collection('players').get.to_a.first

    log.info "listening to player #{player.document_id}"

    player.reference.listen do |snapshot|
      log.info snapshot.inspect
      log.info "document is missing? #{snapshot.missing?}"
    end

    trap("INT") do
      @exit = 0
    end

    loop do
      break if @exit
      sleep 0.5
    end
  end
end

WorstIdeaAdmin.start
