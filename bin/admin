#!/usr/bin/env ruby
require "google/cloud/firestore"
require "logger"
require "pathname"
require "random-word"
require "thor"

$rails_root = Pathname.new(File.expand_path('../..', __FILE__))
Google::Cloud::Firestore.configure do |config|
  config.credentials = $rails_root.join('firebase-admin-sdk-tkray-bad-ideas-106028a5b26f.json').to_s
end

# semantics:
#   assigning something means it will be part of to_h, even if it's nil
class GameState
  VALID_KEYS = Set.new([:title, :current_stage, :leader_player_id, :active_question_id, :active_question_max_answer_id, :created_at, :summary])

  # game states
  JOINING = 'joining'
  QUESTION_OPEN = 'question-open'
  QUESTION_CLOSED = 'question-closed'
  QUESTION_RESULTS = 'question-results'
  FINISHED = 'finished'

  VALID_STAGES = Set.new([
    JOINING,
    QUESTION_OPEN,
    QUESTION_CLOSED,
    QUESTION_RESULTS,
    FINISHED
  ])

  def initialize(data = {})
    @data = {}
    data.each do |key, value|
      set(key, value)
    end
  end

  def set(key, val)
    raise ArgumentError, "#{key} is not a valid key." if !VALID_KEYS.include?(key)
    if key == :current_stage && !VALID_STAGES.include?(val)
      raise ArgumentError, "#{val} is not a valid value for #{key}."
    end
    @data[key] = val
  end

  def to_h
    @data
  end
end

class WorstIdeaAdmin < Thor
  no_commands do
    def log
      @log ||= Logger.new($stdout)
    end

    def db
      @db ||= Google::Cloud::Firestore.new
    end

    def fetch_game(game_name)
      db.doc("games/#{game_name}")
    end
  end

  # bin/admin init --test
  desc "init", "Create a new game from the given template."
  method_option :production, type: :boolean, default: false
  method_option :template, type: :boolean, default: 'test', aliases: '-t'
  method_option :name, type: :string, aliases: '-n', desc: "nice name for the game"
  def init
    now = Time.now
    if options[:production]
      game_name = 'current'
    else
      game_name = "#{now.strftime('%Y%m%d')}-#{options[:template]}-#{RandomWord.nouns(not_shorter_than: 4, not_longer_than: 20).next.gsub('_', '-')}"
    end

    template_path = $rails_root.join("config/game_templates/#{options[:template]}.yml")
    if !File.exist?(template_path)
      log.error("#{template_path} does not exist.")
      exit 1
    end
    template_data = YAML.load_file(template_path)

    game = fetch_game(game_name)
    game.delete
    next_state = GameState.new(
      title: options[:name] || game_name,
      current_stage: GameState::JOINING,
      leader_player_id: nil,
      active_question_id: nil,
      active_question_max_answer_id: nil,
      created_at: now
    )
    game.set(next_state.to_h)

    questions = game.col('questions')
    # nothing in here initially. just FYI they exist.
    # answers for the current question only. (erased after each question is fully summarized.)
    player_answers = game.col('player_answers')
    players = game.col('players')

    template_data['questions'].each_with_index do |(question_text, answers), idx|
      question = questions.doc(idx)
      question.set(
        question: question_text,
        answers: answers,
        summary: {}
      )
    end

    log.info "created game '#{game_name}'"
    `printf '#{game_name}' | pbcopy`
  end

  desc "summarizer", "summarize and persist player answers."
  method_option :game, type: :string, required: true, aliases: '-g'
  def summarize
    game = fetch_game(options[:game])

    players = Set.new
    players_mutex = Mutex.new

    # listen for updates to the list of active players.
    players_listener = game.col('players').listen do |snapshot|
      players_mutex.synchronize do
        players = Set.new

        snapshot.docs.each do |doc|
          data = doc.data
          player_id = doc.document_id
          players << player_id if doc[:is_active]
        end
      end
      log.info "updated player list. #{players.inspect}"
    end

    log.info "players: #{players.to_a.inspect}"

    game_data_mutex = Mutex.new
    game_data = nil
    game_listener = game.listen do |snapshot|
      game_data_mutex.synchronize do
        game_data = snapshot.data
        log.info "new game data. #{game_data.inspect}"
      end
    end

    summarizer = game.col('player_answers').listen do |snapshot|
      active_question_id = nil
      active_question_max_answer_id = nil

      game_data_mutex.synchronize do
        active_question_id = game_data[:active_question_id]
        active_question_max_answer_id = game_data[:active_question_max_answer_id]
      end

      snapshot.docs.each do |player_doc|
        summary = {}
        player_id = player_doc.document_id
        answer_id = player_doc.data[:answer]

        log_context = "active_question_id:#{active_question_id}, player_id:#{player_id}, answer_id:#{answer_id}"

        players_mutex.synchronize do
          if !players.include?(player_id)
            log.error "#{log_context} unknown or inactive player. players:#{players.inspect}"
            next
          end
        end

        if !answer_id.is_a?(Integer)
          log.error "#{log_context} not an integer"
          next
        end

        # validate that the answer id exists for this question
        if answer_id < 0 || answer_id > active_question_max_answer_id
          log.error "#{log_context} answer out of range"
          next
        end

        summary[answer_id] ||= 0
        summary[answer_id] += 1

        db.transaction do
          # update not set, to ensure that we remove outdated keys. (set with merge: true does not do this.)
          game.col("questions").doc(question_id).update({summary: summary})
          game.set(GameState.new({summary: summary}).to_h, {merge: true})
        end
        log.info "summarized question:#{question_id}, #{summary.inspect}"
      end
    end

    trap("INT") do
      @exit = 0
    end

    loop do
      break if @exit
      sleep 0.5
    end

    log.info 'exiting.'

    summarizer.stop
    players_listener.stop
    game_listener.stop
  end

  desc "next", "advance to the next game state"
  method_option :game, type: :string, required: true, aliases: '-g'
  def next_state
    game_name = options[:game]
    game = fetch_game(game_name)
    game_data = game.get

    # TODO: struct for game state

    next_game_state = GameState.new
    next_question_id = nil
    case game_data[:current_stage]
    when GameState::JOINING then
      next_question_id = 0
    when GameState::QUESTION_OPEN then
      next_game_state.set(:current_stage, GameState::QUESTION_CLOSED)
    when GameState::QUESTION_CLOSED then
      next_game_state.set(:current_stage, GameState::QUESTION_RESULTS)
    when GameState::QUESTION_RESULTS then
      current_question_id = game_data[:active_question_id]
      next_question_id = current_question_id + 1
    when GameState::FINISHED then
      log.info 'game is already finished. not advancing.'
      exit 0
    else
      log.error "game is in unknown stage '#{game_data[:current_stage]}'."
    end

    if next_question_id
      next_question = game.col('questions').doc(next_question_id).get
      if next_question.exists?
        next_game_state.set(:active_question_id, next_question_id)
        next_game_state.set(:active_question_max_answer_id, next_question[:answers].size - 1)
        next_game_state.set(:current_stage, GameState::QUESTION_OPEN)
      else
        next_game_state.set(:active_question_id, nil)
        next_game_state.set(:active_question_max_answer_id, nil)
        next_game_state.set(:current_stage, GameState::FINISHED)
      end
    end

    # TODO: eliminate players
    next_game_state.set(:summary, {})

    log.info next_game_state.inspect
    db.transaction do
      game.set(
        next_game_state.to_h,
        merge: true
      )
      game.col('player_answers').get do |pa|
        pa.delete
      end
    end

    # questions.where('sequence', '=', 1).get.first.data
    #=> {:question=>"what is?", :answers=>[1, 2, 3], :sequence=>1}
  end

  desc "current", "report current game state"
  method_option :game, type: :string, required: true, aliases: '-g'
  def current_state
    game_data = fetch_game(options[:game]).get

    log.info "current_stage: #{game_data[:current_stage]}, active_question_id: #{game_data[:active_question_id]}," \
      " active_question_max_answer_id: #{game_data[:active_question_max_answer_id]}"
  end
  # def add_player
  # end

  # def add_answer
  # end
end

WorstIdeaAdmin.start
